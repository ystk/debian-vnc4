diff -Nurd vnc4-4.1.1+X4.3.0/common/network/TcpSocket.cxx vnc4-4.1.1+X4.3.0/common/network/TcpSocket.cxx
--- vnc4-4.1.1+X4.3.0/common/network/TcpSocket.cxx	2009-06-03 16:59:51.000000000 -0700
+++ vnc4-4.1.1+X4.3.0/common/network/TcpSocket.cxx	2009-06-03 16:57:40.000000000 -0700
@@ -104,52 +104,78 @@
 {
 }
 
-TcpSocket::TcpSocket(const char *host, int port)
+TcpSocket::TcpSocket(const char *host, int port, int version)
   : closeFd(true)
 {
-  int sock;
+  int sock, res, error = 0;
+  int connected = 0;
+  struct addrinfo hints;
+  struct addrinfo *hostaddr = NULL;
+  struct addrinfo *tmpaddr;
+  char portstring[16];
 
-  // - Create a socket
   initSockets();
-  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
-    throw SocketException("unable to create socket", errorNumber);
 
-#ifndef WIN32
-  // - By default, close the socket on exec()
-  fcntl(sock, F_SETFD, FD_CLOEXEC);
+  memset(&hints, 0, sizeof(hints));
+  hints.ai_socktype = SOCK_STREAM;
+  hints.ai_flags = AI_NUMERICSERV;
+  if (version == 6) {
+#ifdef AF_INET6
+    hints.ai_family = AF_INET6;
+#else
+    throw SocketException("IPv6 not supported", errorNumber);
 #endif
+  } else
+    hints.ai_family = (version == 4) ? AF_INET : 0;
 
-  // - Connect it to something
+  // - This is silly but it's easier than changing the interface
+  snprintf(portstring, sizeof(portstring), "%d", port);
 
-  // Try processing the host as an IP address
-  struct sockaddr_in addr;
-  memset(&addr, 0, sizeof(addr));
-  addr.sin_family = AF_INET;
-  addr.sin_addr.s_addr = inet_addr(host);
-  addr.sin_port = htons(port);
-  if ((int)addr.sin_addr.s_addr == -1) {
-    // Host was not an IP address - try resolving as DNS name
-    struct hostent *hostinfo;
-    hostinfo = gethostbyname(host);
-    if (hostinfo && hostinfo->h_addr) {
-      addr.sin_addr.s_addr = ((struct in_addr *)hostinfo->h_addr)->s_addr;
-    } else {
-      int e = errorNumber;
-      closesocket(sock);
-      throw SocketException("unable to resolve host by name", e);
+  res = getaddrinfo(host, portstring, &hints, &hostaddr);
+  if (res == EAI_NONAME) {
+    hints.ai_flags = AI_CANONNAME;
+    res = getaddrinfo(host, portstring, &hints, &hostaddr);
+  } else if(hostaddr)
+    hostaddr->ai_canonname = NULL;
+  if (res || !hostaddr)
+    throw SocketException("unable to resolve host by name", errorNumber);
+
+  // - Try to connect to every listed round robin IP
+  tmpaddr = hostaddr;
+  errno = 0;
+  for (tmpaddr = hostaddr; tmpaddr; tmpaddr = tmpaddr->ai_next) {
+    if (tmpaddr->ai_family == AF_UNIX)
+      continue;
+
+    // - Create a socket
+    sock = socket(tmpaddr->ai_family, SOCK_STREAM, 0);
+    if (sock < 0) {
+      error = errorNumber;
+      freeaddrinfo(hostaddr);
+      throw SocketException("unable to create socket", error);
     }
-  }
 
-  // Attempt to connect to the remote host
-  for (;;) {
-    if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) != 0) {
-      int e = errorNumber;
-      if (e == EINTR)
-        continue;
+#ifndef WIN32
+    // - By default, close the socket on exec()
+    fcntl(sock, F_SETFD, FD_CLOEXEC);
+#endif
+
+    // Attempt to connect to the remote host
+    do {
+      res = connect(sock, tmpaddr->ai_addr, tmpaddr->ai_addrlen);
+    } while (res != 0 && errorNumber == EINTR);
+    if (res != 0) {
+      error = errorNumber;
       closesocket(sock);
-      throw SocketException("unable to connect to host", e);
-    } else break;
+      continue;
+    }
+
+    connected++;
+    break;
   }
+  freeaddrinfo(hostaddr);
+  if (!connected)
+    throw SocketException("unable to connect to host", error);
 
   // Disable Nagle's algorithm, to reduce latency
   enableNagles(sock, false);
diff -Nurd vnc4-4.1.1+X4.3.0/common/network/TcpSocket.h vnc4-4.1.1+X4.3.0/common/network/TcpSocket.h
--- vnc4-4.1.1+X4.3.0/common/network/TcpSocket.h	2009-06-03 16:59:51.000000000 -0700
+++ vnc4-4.1.1+X4.3.0/common/network/TcpSocket.h	2009-06-03 16:57:40.000000000 -0700
@@ -43,7 +43,8 @@
   class TcpSocket : public Socket {
   public:
     TcpSocket(int sock, bool close=true);
-    TcpSocket(const char *name, int port);
+    // version can be 4 or 6 to force IPv4 or IPv6 respectively
+    TcpSocket(const char *name, int port, int version = 0);
     virtual ~TcpSocket();
 
     virtual char* getMyAddress();
diff -Nurd vnc4-4.1.1+X4.3.0/unix/vncviewer/CConn.cxx vnc4-4.1.1+X4.3.0/unix/vncviewer/CConn.cxx
--- vnc4-4.1.1+X4.3.0/unix/vncviewer/CConn.cxx	2009-06-03 16:59:51.000000000 -0700
+++ vnc4-4.1.1+X4.3.0/unix/vncviewer/CConn.cxx	2009-06-03 16:57:40.000000000 -0700
@@ -52,7 +52,7 @@
 StringParameter windowName("name", "The X window name", "");
 
 CConn::CConn(Display* dpy_, int argc_, char** argv_, network::Socket* sock_,
-             char* vncServerName, bool reverse)
+             char* vncServerName, bool reverse, int ipVersion)
   : dpy(dpy_), argc(argc_),
     argv(argv_), serverHost(0), serverPort(0), sock(sock_), viewport(0),
     desktop(0), desktopEventHandler(0),
@@ -106,7 +106,7 @@
       }
     }
 
-    sock = new network::TcpSocket(serverHost, serverPort);
+    sock = new network::TcpSocket(serverHost, serverPort, ipVersion);
     vlog.info("connected to host %s port %d", serverHost, serverPort);
   }
 
diff -Nurd vnc4-4.1.1+X4.3.0/unix/vncviewer/CConn.h vnc4-4.1.1+X4.3.0/unix/vncviewer/CConn.h
--- vnc4-4.1.1+X4.3.0/unix/vncviewer/CConn.h	2005-03-11 07:08:41.000000000 -0800
+++ vnc4-4.1.1+X4.3.0/unix/vncviewer/CConn.h	2009-06-03 16:57:40.000000000 -0700
@@ -48,7 +48,7 @@
 public:
 
   CConn(Display* dpy_, int argc_, char** argv_, network::Socket* sock_,
-        char* vncServerName, bool reverse=false);
+        char* vncServerName, bool reverse=false, int ipVersion=0);
   ~CConn();
 
   // TXDeleteWindowCallback methods
diff -Nurd vnc4-4.1.1+X4.3.0/unix/vncviewer/vncviewer.cxx vnc4-4.1.1+X4.3.0/unix/vncviewer/vncviewer.cxx
--- vnc4-4.1.1+X4.3.0/unix/vncviewer/vncviewer.cxx	2009-06-03 16:59:51.000000000 -0700
+++ vnc4-4.1.1+X4.3.0/unix/vncviewer/vncviewer.cxx	2009-06-03 16:57:40.000000000 -0700
@@ -152,7 +152,7 @@
 static void usage()
 {
   fprintf(stderr,
-          "\nusage: %s [parameters] [host:displayNum] [parameters]\n"
+          "\nusage: %s [-4|-6] [parameters] [host:displayNum] [parameters]\n"
           "       %s [parameters] -listen [port] [parameters]\n",
           programName,programName);
   fprintf(stderr,"\n"
@@ -239,8 +239,16 @@
   programName = argv[0];
   char* vncServerName = 0;
   Display* dpy = 0;
+  int ipVersion = 0;
 
   for (int i = 1; i < argc; i++) {
+    if (!strcmp(argv[i], "-4")) {
+      ipVersion = 4;
+      continue;
+    } else if(!strcmp(argv[i], "-6")) {
+      ipVersion = 6;
+      continue;
+    }
     if (Configuration::setParam(argv[i]))
       continue;
 
@@ -313,7 +321,7 @@
 
     TXWindow::init(dpy, "Vncviewer");
     xloginIconifier.iconify(dpy);
-    CConn cc(dpy, argc, argv, sock, vncServerName, listenMode);
+    CConn cc(dpy, argc, argv, sock, vncServerName, listenMode, ipVersion);
 
     // X events are processed whenever reading from the socket would block.
 
