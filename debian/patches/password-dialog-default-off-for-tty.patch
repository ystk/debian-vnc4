--- ./unix/vncviewer/vncviewer.cxx~	2006-08-09 08:52:39.000000000 +0200
+++ ./unix/vncviewer/vncviewer.cxx	2006-09-03 22:17:07.089420250 +0200
@@ -93,6 +93,10 @@
 
 BoolParameter listenMode("listen", "Listen for connections from VNC servers",
                          false);
+BoolParameter popupUserPassDialog("PasswordDialog",
+				  "Popup a user and password dialog. Default "
+				  "no when running from command line",
+				  !isatty(0));
 StringParameter geometry("geometry", "X geometry specification", "");
 StringParameter displayname("display", "The X display", "");
 
--- ./unix/vncviewer/parameters.h~	2005-03-11 16:08:41.000000000 +0100
+++ ./unix/vncviewer/parameters.h	2006-09-03 21:46:02.932917750 +0200
@@ -37,6 +37,7 @@
 extern rfb::BoolParameter sendPrimary;
 extern rfb::BoolParameter fullScreen;
 extern rfb::StringParameter geometry;
+extern rfb::BoolParameter popupUserPassDialog;
 
 extern char aboutText[];
 extern char* programName;
--- ./unix/vncviewer/CConn.cxx~	2005-03-11 16:08:41.000000000 +0100
+++ ./unix/vncviewer/CConn.cxx	2006-09-03 22:28:17.819338250 +0200
@@ -37,6 +37,8 @@
 #include "ServerDialog.h"
 #include "PasswdDialog.h"
 #include "parameters.h"
+#include <termios.h>
+#include <stdio.h>
 
 using namespace rfb;
 
@@ -48,6 +50,8 @@
 StringParameter menuKey("MenuKey", "The key which brings up the popup menu",
                         "F8");
 StringParameter windowName("name", "The X window name", "");
+#include <termios.h>
+#include <stdio.h>
 
 CConn::CConn(Display* dpy_, int argc_, char** argv_, network::Socket* sock_,
              char* vncServerName, bool reverse)
@@ -194,6 +198,9 @@
 
 void CConn::getUserPasswd(char** user, char** password)
 {
+  struct termios oldio;
+  struct termios newio;
+
   CharArray passwordFileStr(passwordFile.getData());
   if (!user && passwordFileStr.buf[0]) {
     FILE* fp = fopen(passwordFileStr.buf, "r");
@@ -206,15 +213,45 @@
     return;
   }
 
-  const char* secType = secTypeName(getCurrentCSecurity()->getType());
-  const char* titlePrefix = "VNC Authentication";
-  CharArray title(strlen(titlePrefix) + strlen(secType) + 4);
-  sprintf(title.buf, "%s [%s]", titlePrefix, secType);
-  PasswdDialog dlg(dpy, title.buf, !user);
-  if (!dlg.show()) throw rfb::Exception("Authentication cancelled");
-  if (user)
-    *user = strDup(dlg.userEntry.getText());
-  *password = strDup(dlg.passwdEntry.getText());
+  int popup = popupUserPassDialog;
+  if (!popup) {
+    if (user) {
+      /* Get username */
+      fprintf(stderr, "Username: ");
+      *user = new char[40];
+      fgets(*user, 40, stdin);
+    }
+
+    if (tcgetattr (fileno (stdin), &oldio) != 0) {
+      popup = 1;
+    }
+    else {
+      newio = oldio;
+      newio.c_lflag &= ~ECHO;
+      fprintf(stderr, "Password: ");
+      /* Echo off */
+      if (tcsetattr (fileno (stdin), TCSAFLUSH, &newio) != 0)
+	popup = 1;
+      
+      /* Read the password. */
+      *password = new char[8];
+      fgets (*password, 8, stdin);
+
+      /* Restore terminal. */
+      (void) tcsetattr (fileno (stdin), TCSAFLUSH, &oldio);
+    }
+  }
+  if (popup) {
+    const char* secType = secTypeName(getCurrentCSecurity()->getType());
+    const char* titlePrefix = "VNC Authentication";
+    CharArray title(strlen(titlePrefix) + strlen(secType) + 4);
+    sprintf(title.buf, "%s [%s]", titlePrefix, secType);
+    PasswdDialog dlg(dpy, title.buf, !user);
+    if (!dlg.show()) throw rfb::Exception("Authentication cancelled");
+    if (user)
+      *user = strDup(dlg.userEntry.getText());
+    *password = strDup(dlg.passwdEntry.getText());
+  }
 }
 
 
